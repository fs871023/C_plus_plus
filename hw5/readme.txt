學號:406315017
姓名:鄧智宇
環境(哪一台工作站):linux.cs.ccu.edu.tw
E-mail:fs871023@gmail.com
簡介:

test.cpp:
複製PPT的程式碼，有就錯誤的地方(x1、y1誤植成x、y)進行更改。

bigint.h
裡面有以下宣告型態
六個constructor，>> 和 <<各一個，
+、-各有三個，分別處理bigint之間的、int對bigint的、及bigint對int的
以及bigint間的比大小>、<、>=、<=、==、!=等

bigint.cpp
constuctor的方式都一樣：若有輸入參數，則由小到大給值，其餘給0

istream >>： 1.先把 input放到字串 
2.對字串從最後面開始，把九個字元用substr切割進temp中
3.如果不足9個，則把剩下的(總長/9的餘數)切割
4.temp轉換成int給bigint，由小往大儲存。

ostream <<： 1.找到最大且非0的位數
2.由大往小，把值給output。
方式是複製PPT建議的方式(setw<<setfill<<obj)，不過在電腦上執行時會在位數左端補上0
e.g.「1」輸出時會變「000000001」

>的實作：由大的位數往小的比較，比較大就return true 比較小就return false
等於就繼續，全部等於return false
<=則使用>的相反結果

<的實作：和>一樣，由大往小比較，return則顛倒，等於的狀況處理方式相同
>=則使用<的相反結果

==的實作：由大往小比較，發現有不一樣就return false 全部等於才會是true
!=則使用==的相反結果

+的實作
bigint 和bigint方式如下
1.先對每一位數個別做運算 
2.檢查前面的4位數有沒有overflow，有就進位處理 
3.第5位數因為沒有可以進位的，所以只取沒有進位的部分，e.g.1000000001 -> 1
bigint對int和int對bigint
1.先看int是否有超過999999999，以做個別運算(有無用到第2位數)，後面處理跟上面一樣。
2.檢查前面的4位數有沒有overflow，有就進位處理 
3.第5位數因為沒有可以進位的，所以只取沒有進位的部分，e.g.1000000001 -> 1

-的實作
運算都用bigint ，如果是int就轉成bigint，轉換後方式都一樣如下：
1.檢查被減數比較大還是比較小，如果比較小就直接輸出0(不考慮負數)
2.如果比較大，就從最小的位數開始減，如果發現不夠減就先借位
3.借位方式是找下一個位數借。變負數的話，因為減數最小會是0，所以又會向下一個借。
但因為已經知道被減數比較大，所以最後答案還是會是正整數

test.txt
裡面是PPT的六個測資，只要在make之後，再執行./test.out <text.txt> output.txt
在output內即可看到如PPT的結果。